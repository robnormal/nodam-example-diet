// Generated by CoffeeScript 1.6.1
(function() {
  var Async, DELETE, GET, M, POST, PUT, R, actions, addIngredient, addMealToPlan, apology, createFood, createMealFood, createPlan, createWeek, db, dbM, deleteIngredient, endsWith, fmap, foodUrl, fs, getLatestMeal, getMatchedWeek, jade, logError, mealUrl, mimeTypes, nodam, orm, path, planUrl, qs, queries, removeMealFromPlan, reorderPlanMeals, routes, serveCompressed, serveFile, sql, toInt, updateFood, updateIngredient, updateMealFood, updateWeek, web, weekUrl, _;

  Error.stackTraceLimit = Infinity;

  process.on('error', function(err) {
    return console.log(err.stack);
  });

  _ = require('../nodam/lib/curry.js');

  nodam = require('../nodam/lib/nodam.js');

  sql = require('../nodam/lib/sqlite.js');

  R = require('../nodam/lib/restriction.js');

  orm = require('./lib/orm2.js');

  db = require('./model.js');

  web = require('./web.coffee');

  qs = require('querystring');

  jade = require('jade');

  fs = nodam.fs();

  M = nodam.Maybe;

  Async = nodam.Async;

  GET = 'GET';

  POST = 'POST';

  PUT = 'PUT';

  DELETE = 'DELETE';

  dbM = db.dbM;

  queries = db.queries;

  fmap = _.flip(_.map);

  toInt = db.toInt;

  foodUrl = function(food) {
    return '/food/' + web.wordToUri(food.name);
  };

  mealUrl = function(meal) {
    return '/meal/' + meal.id;
  };

  planUrl = function(plan) {
    return '/plan/' + web.wordToUri(plan.name);
  };

  weekUrl = function(week) {
    return '/week/' + web.wordToUri(week.name);
  };

  web.helper.foodUrl = foodUrl;

  web.helper.mealUrl = mealUrl;

  web.helper.planUrl = planUrl;

  web.helper.weekUrl = weekUrl;

  apology = 'Sorry, there was a problem with your request.';

  logError = function(err) {
    console.log(err);
    console.log(err.stack);
    return nodam.result();
  };

  createFood = function(post) {
    return db.runQuery(queries.foods_insert, {
      name: post.food_name,
      type: post.food_type,
      cals: post.food_cals || '',
      grams: post.food_grams || ''
    });
  };

  updateFood = function(post) {
    var data, food_id, templ;
    food_id = post.update;
    if (food_id) {
      data = {
        name: post['food_name_' + food_id],
        type: post['food_type_' + food_id],
        id: food_id
      };
      if (post['food_cals_' + food_id]) {
        data.cals = post['food_cals_' + food_id];
        templ = queries.food_update_cals;
      } else if (post['food_grams_' + food_id]) {
        data.grams = post['food_grams_' + food_id];
        templ = queries.food_update_grams;
      }
      return db.runQuery(templ, data).then(db.getFood(food_id)).pipeMaybe(nodam.failure('An unknown error occured.'), db.updateFoodCals);
    } else {
      return nodam.failure('No food exists with that ID.');
    }
  };

  deleteIngredient = function(post, food) {
    return db.run('DELETE FROM ingredients ' + orm.condition({
      food_id: food.id,
      ingredient_id: post['delete']
    })).then(db.updateFoodCals(food));
  };

  addIngredient = function(post, food) {
    return db.addIngredient(food, post.ing_name, toInt(post.grams) || 0).rescue(function() {
      return web.error403('No ingredient called "' + post.ing_name + '" was found.');
    });
  };

  updateIngredient = function(post, food) {
    return db.runQuery(queries.ingredients_update, {
      food_id: post.food_id,
      grams: post.grams,
      ingred_id: post.update
    }).then(db.updateFoodCals(food));
  };

  createMealFood = function(meal, post) {
    var post_grams;
    if (!meal.id) {
      return nodam.failure('No meal with that ID exists.');
    } else {
      post_grams = toInt(post.grams || 0);
      return db.foodByName(post.food_name).pipeMaybe(nodam.failure('We have no food called "' + post.food_name + '"'), function(food) {
        return db.getMealFood(meal.id, food.id).pipe(function(m_meal_food) {
          if (m_meal_food.isNothing()) {
            return db.runQuery(queries.meal_foods_insert, {
              meal_id: meal.id,
              food_id: food.id,
              grams: post_grams
            });
          } else {
            return db.runQuery(queries.meal_foods_update, {
              meal_id: meal.id,
              food_id: food.id,
              grams: m_meal_food.fromJust().grams + post_grams
            });
          }
        });
      });
    }
  };

  updateMealFood = function(meal, post) {
    return db.runQuery(queries.meal_foods_update, {
      meal_id: meal.id,
      food_id: post.update,
      grams: post.grams
    });
  };

  createPlan = function(post) {
    if (post.name) {
      return db.runQuery(queries.plans_insert, {
        name: post.name
      }).then(db.getOrFail(queries.plans + orm.condition({
        id: orm.literal('last_insert_rowid()')
      })));
    } else {
      return nodam.failure('Invalid form submission.');
    }
  };

  addMealToPlan = function(post, plan) {
    if (!post.meal_name) {
      return nodam.failure('Invalid form submission.');
    }
    return db.mealByName(post.meal_name).pipeMaybe(nodam.failure('No meal exists by that name'), function(meal) {
      return db.runQuery(queries.plan_meals_insert, {
        plan_id: plan.id,
        meal_id: meal.id,
        ordinal: post.ord
      });
    });
  };

  removeMealFromPlan = function(post, plan) {
    if (post.removeMeal) {
      return db.run('DELETE FROM plan_meals' + orm.condition({
        id: post.removeMeal
      }));
    } else {
      return nodam.failure('Invalid form submission.');
    }
  };

  reorderPlanMeals = function(post, plan) {
    return db.reorderPlanMeals(plan, _.map(post.ords, toInt));
  };

  getLatestMeal = db.get(queries.meals + orm.condition({
    id: orm.literal('last_insert_rowid()')
  }));

  createWeek = function(post) {
    if (post.name) {
      return db.runQuery(queries.weeks_insert, {
        name: post.name
      }).then(db.getOrFail(queries.weeks + orm.condition({
        id: orm.literal('last_insert_rowid()')
      })));
    } else {
      return nodam.failure('Invalid form submission.');
    }
  };

  getMatchedWeek = function(match) {
    var plan_name;
    if (!match[1]) {
      return nodam.failure();
    }
    plan_name = match[1] && web.uriToWord(match[1]);
    return db.get(db.queries.weeks + orm.condition({
      name: plan_name
    }));
  };

  updateWeek = function(post, week) {
    return Async.mapM(post.plans, function(plan_id, i) {
      return db.setWeekPlan(week, i + 1, toInt(plan_id));
    });
  };

  actions = {
    root: function(match) {
      return db.allFoods.pipe(function(rows) {
        return web.showView('foods', {
          foods: rows
        });
      });
    },
    food: function(match) {
      var changes;
      changes = web.getPost.pipe(function(post) {
        if (post['delete']) {
          return db.deleteFood(post['delete']);
        } else if (post.create) {
          return createFood(post);
        } else if (post.update) {
          return updateFood(post);
        } else {
          return nodam.result();
        }
      });
      return changes.then(web.redirect('/'));
    },
    ingredients: function(match) {
      var food_name;
      food_name = match[1] && web.uriToWord(match[1]);
      if (!food_name) {
        return web.error404;
      }
      return db.foodByName(food_name).pipeMaybe(web.error404, function(food) {
        if (food.type === 'dish') {
          return db.ingredientsForFood(food).pipe(function(food2) {
            return web.showView('ingredients', {
              ingredients: food2.ingredients,
              food: food2,
              food_url: foodUrl(food2)
            });
          });
        } else {
          return nodam.result(food.name + ' has no ingredients.');
        }
      });
    },
    manageIngredients: function(match) {
      var food_name;
      food_name = match[1] && web.uriToWord(match[1]);
      if (!food_name) {
        return web.error404;
      }
      return web.getPost.pipe(function(post) {
        return db.foodByName(food_name).pipeMaybe(web.error403('No such food: ' + food_name), function(food) {
          var changes;
          changes = 'dish' !== food.type ? web.error403(food_name + ' cannot have ingredients.') : post['delete'] ? deleteIngredient(post, food) : post.create ? addIngredient(post, food) : post.update ? updateIngredient(post, food) : web.error403('Invalid form submission.');
          return changes.then(web.redirect(match[0]));
        });
      });
    },
    meals: function(match) {
      return db.allMeals.pipe(function(meals) {
        return Async.mapM(meals, db.fillMealFoods).pipe(function(fmeals) {
          return web.showView('meals', {
            meals: fmeals
          });
        });
      });
    },
    manageMeals: function(match) {
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        if (post['delete']) {
          return db.deleteMeal(post['delete']).then(web.redirect('/meals'));
        } else if (post.create) {
          return db.runQuery(queries.meals_insert, {
            name: post.name
          }).then(getLatestMeal).pipeMaybe(web.error403(apology), function(meal) {
            return web.redirect(mealUrl(meal));
          });
        } else {
          return web.redirect('/meals');
        }
      });
    },
    meal: function(match) {
      if (!match[1]) {
        return web.error404;
      }
      return db.mealById(match[1]).pipeMaybe(web.error404, function(meal) {
        return db.fillMealFoods(meal).pipe(function(mealFilled) {
          return db.mealIngredients(meal).pipe(function(ingreds) {
            return web.showView('meal', {
              meal_foods: mealFilled.foods,
              meal: mealFilled,
              ingredients: ingreds
            });
          });
        });
      });
    },
    mealFoods: function(match) {
      var meal_id;
      meal_id = match[1];
      if (!meal_id) {
        return web.error404;
      }
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var changes;
        changes = db.mealById(meal_id).pipeMaybe(nodam.failure('No meal with that id: ' + meal_id), function(meal) {
          if (post.meal_name) {
            return db.updateMealName(meal, post.meal_name);
          } else if (post['delete']) {
            return db.deleteMealFood(meal, post['delete']);
          } else if (post.create) {
            return createMealFood(meal, post);
          } else if (post.update) {
            return updateMealFood(meal, post);
          } else {
            return nodam.failure('Invalid form submission.');
          }
        });
        return changes.then(web.redirect(match[0])).rescue(function(err) {
          return logError(err).then(web.error403(err));
        });
      });
    },
    foodList: function(match) {
      var m, term;
      term = match[2];
      m = term ? db.allQ(db.queries.food_list, {
        term: term
      }).mmap(function(rows) {
        var names;
        names = _.map(rows || [], function(row) {
          return row.name;
        });
        return JSON.stringify(names);
      }) : nodam.result('');
      return m.pipe(web.success);
    },
    plans: function(match) {
      return db.all(queries.plans).pipe(function(plans) {
        return web.showView('plans', {
          plans: plans
        });
      });
    },
    planMeals: function(match) {
      var plan_name;
      plan_name = match[1] && web.uriToWord(match[1]);
      return db.get(queries.plans + orm.condition({
        name: plan_name
      })).pipeMaybe(web.error403('No plan "' + plan_name + '" exists.'), function(plan) {
        return db.getPlanMeals(plan).pipeMapM(function(p_meal) {
          return db.fillMealFoods(p_meal.meal).mmap(function(meal) {
            return _.set(p_meal, 'meal', meal);
          });
        }).pipe(function(planMealsFilled) {
          var planFilled;
          planFilled = _.set(plan, 'p_meals', planMealsFilled);
          return db.allMeals.pipe(function(all_meals) {
            return db.planIngredients(plan).pipe(function(ingreds) {
              return web.showView('plan', {
                plan: db.setPlanCals(planFilled),
                all_meals: all_meals,
                ingredients: ingreds
              });
            });
          });
        });
      });
    },
    managePlan: function(match) {
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var plan_name;
        if (post['delete']) {
          return db.deletePlan(post['delete']).then(web.redirect('/plans'));
        } else if (post.create) {
          return (createPlan(post)).pipe(function(new_plan) {
            return web.redirect(planUrl(new_plan));
          });
        } else {
          plan_name = match[1] && web.uriToWord(match[1]);
          return db.get(queries.plans + orm.condition({
            name: plan_name
          })).pipeMaybe(nodam.failure('No plan with that name: ' + plan_name), function(plan) {
            var m;
            if (post.rename && post.plan_name) {
              return db.renamePlan(plan, post.plan_name).pipe(function(plan1) {
                return web.redirect(planUrl(plan1));
              });
            } else if (post.reorder) {
              return reorderPlanMeals(post, plan).then(web.success('OK'));
            } else {
              m = post.update ? updatePlan(post, plan) : post.addMeal ? addMealToPlan(post, plan) : post.removeMeal ? removeMealFromPlan(post, plan) : nodam.failure('Invalid form submission.');
              return m.then(web.redirect(match[0]));
            }
          }).rescue(web.error403);
        }
      });
    },
    weeks: function(match) {
      return db.all(queries.weeks).pipe(function(weeks) {
        return web.showView('weeks', {
          weeks: weeks
        });
      });
    },
    week: function(match) {
      return getMatchedWeek(match).pipeMaybe(web.error404, function(week) {
        return db.getWeekPlans(week).pipe(function(w_plans) {
          return db.weekIngredients(week).pipe(function(ingredients) {
            return db.all(queries.plans).pipe(function(all_plans) {
              return web.showView('week', {
                week_plans: w_plans,
                all_plans: all_plans,
                week: week,
                ingredients: ingredients
              });
            });
          });
        });
      });
    },
    manageWeek: function(match) {
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var week_name;
        if (post['delete']) {
          return db.deleteWeek(post['delete']).then(web.redirect('/weeks'));
        } else if (post.create) {
          return (createWeek(post)).pipe(function(new_week) {
            return web.redirect(weekUrl(new_week));
          });
        } else {
          week_name = match[1] && web.uriToWord(match[1]);
          return db.get(queries.weeks + orm.condition({
            name: week_name
          })).pipeMaybe(nodam.failure('No week with that name: ' + week_name), function(week) {
            if (post.rename && post.week_name) {
              return db.renameWeek(week, post.week_name).pipe(function(week1) {
                return web.redirect(weekUrl(week1));
              });
            } else if (post.update) {
              return updateWeek(post, week).then(web.redirect(match[0]));
            } else {
              return nodam.failure('Invalid form submission.');
            }
          }).rescue(web.error403);
        }
      });
    },
    weekUpdate: function(match) {
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        return db.setWeekPlan(toInt(post.week_id), toInt(post.ord), toInt(post.plan_id)).then(redirect(match[0])).rescue(web.error403);
      });
    },
    createWeek: function(match) {
      return nodam.combineStrict([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var newWeek;
        newWeek = post.create ? createWeek(post) : nodam.failure('Invalid form submission.');
        return newWeek.pipe(function(week) {
          return web.redirect(weekUrl(week));
        }).rescue(function(msg) {
          return web.error403(msg);
        });
      });
    },
    nutrients: function(match) {
      return orm.Nutrient.find().pipe(function(nutnts) {
        return web.showView('nutrients', {
          nutrients: nutnts
        });
      });
    },
    nutrient: function(match) {
      return orm.nutrientWithFoods({
        name: match[1]
      }).pipeMaybe(web.error404, function(nutrient) {
        return orm.FoodNutrient.find({
          nutrient_id: nutrient.id
        }).pipeMapM(function(f_nut) {
          return orm.Food.get({
            id: f_nut.food_id
          }).mmapFmap(function(food) {
            return f_nut.setFood(food);
          });
        }).mmap(M.Maybe.concat).pipe(function(f_nuts) {
          return web.showView('nutrient', {
            f_nutrients: f_nuts,
            nutrient: nutrient
          });
        });
      });
    },
    manageNutrient: function(match) {
      var changes;
      changes = web.getPost.pipe(function(post) {
        if (post['delete']) {
          return orm.deleteNutrient(post['delete']);
        } else if (post.create) {
          return orm.createNutrient(post.name);
        } else {
          return nodam.result();
        }
      });
      return changes.then(web.redirect('/nutrients'));
    },
    foodNutrients: function(match) {
      var food_name;
      food_name = web.uriToWord(match[1]);
      return orm.Food.get({
        name: food_name
      }).pipeMaybe(web.error404, function(food) {
        return orm.foodNutrients(food).pipe(function(nutnts) {
          return web.showView('foodNutrients', {
            f_nutrients: nutnts,
            food: food
          });
        });
      });
    },
    manageFoodNutrients: function(match) {
      return web.getPost.pipe(function(post) {
        var food_name;
        food_name = web.uriToWord(match[1]);
        return orm.Food.get({
          name: food_name
        }).pipeMaybe(web.error403('Could not find food: ' + match[1]), function(food) {
          return orm.foodNutrients(food).pipe(function(nutnts) {
            if (post['delete']) {
              return orm.deleteFoodNutrient(food, post['delete']);
            } else if (post.create) {
              return orm.createFoodNutrient(food, post.name, post.amount);
            } else {
              return nodam.result();
            }
          });
        }).then(web.redirect('/nutrientsin/' + match[1]).rescue(function(err) {
          return logError(err).then(web.error403(err));
        }));
      });
    },
    planNutrient: function(match) {
      var nut_name, plan_name;
      plan_name = web.uriToWord(match[1]);
      nut_name = web.uriToWord(match[2]);
      return orm.Plan.get({
        name: plan_name
      }).pipeMaybe(web.error403('could not find ' + plan_name), function(plan) {
        return orm.Nutrient.get({
          name: nut_name
        }).pipeMaybe(web.error403('could not find ' + nut_name), function(nutrient) {
          return orm.planNutrientAmount(plan, nutrient).pipe(function(amount) {
            return web.success(plan.name + ' has ' + amount + ' ' + nut_name);
          });
        });
      });
    },
    staticFile: function(match) {
      return serveFile(match[0]);
    }
  };

  mimeTypes = {
    html: 'text/html',
    jpeg: 'image/jpeg',
    jpg: 'image/jpeg',
    png: 'image/png',
    js: 'text/javascript',
    css: 'text/css'
  };

  path = require('path');

  endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  serveCompressed = function(file) {
    var getServePath;
    getServePath = endsWith(file, '.css') || endsWith(file, '.js') ? fs.exists(file + '.gz').pipe(function(bool) {
      var serve;
      serve = bool ? file + '.gz' : file;
      return nodam.result(serve);
    }) : nodam.result(file);
    return getServePath.pipe(function(serve) {
      var fileStream;
      fileStream = fs.createReadStream(serve);
      return nodam.get('response').pipe(function(resp) {
        return Async.listen(fileStream, 'error', function(err) {
          resp.status = 404;
          resp.write('File not found.');
          return nodam.failure(resp.end());
        }).pipe(function() {
          var mime;
          mime = mimeTypes[path.extname(serve).substr(1)];
          resp.status = 200;
          resp.setHeader('Content-Type', mime);
          return nodam.result(fileStream.pipe(resp));
        });
      });
    });
  };

  serveFile = function(file) {
    var filepath;
    filepath = __dirname + '/' + file;
    return serveCompressed(filepath);
  };

  routes = [
    [
      '/', {
        GET: actions.root
      }
    ], [
      /^\/food\/(.+)/, {
        GET: actions.ingredients,
        POST: actions.manageIngredients
      }
    ], [
      /^\/food(\/?)$/, {
        POST: actions.food
      }
    ], [
      /^\/meals(\/?)$/, {
        GET: actions.meals
      }
    ], [
      /^\/meal\/(\d+)/, {
        GET: actions.meal,
        POST: actions.mealFoods
      }
    ], [
      /^\/meal(\/?)$/, {
        POST: actions.manageMeals
      }
    ], [
      /^\/plans(\/?)$/, {
        GET: actions.plans
      }
    ], [
      /^\/plan(\/?)$/, {
        POST: actions.managePlan
      }
    ], [
      /^\/plan\/(.+)/, {
        GET: actions.planMeals,
        POST: actions.managePlan
      }
    ], [
      /^\/weeks(\/?)$/, {
        GET: actions.weeks
      }
    ], [
      /^\/week(\/?)$/, {
        POST: actions.manageWeek
      }
    ], [
      /^\/week\/(.+)/, {
        GET: actions.week,
        POST: actions.manageWeek
      }
    ], [
      /^\/nutrientsin\/(.+)/, {
        GET: actions.foodNutrients,
        POST: actions.manageFoodNutrients
      }
    ], [
      /^\/nutrients(\/?)$/, {
        GET: actions.nutrients
      }
    ], [
      /^\/nutrient(?:\/(.+)?)/, {
        GET: actions.nutrient,
        POST: actions.manageNutrient
      }
    ], [
      /^\/plannutrient\/(.+)\/(.+)/, {
        GET: actions.planNutrient
      }
    ], [
      /^\/foodlist(\/?)\?term=(\w*)/, {
        GET: actions.foodList
      }
    ], [
      /^\/(assets\/.*)/, {
        GET: actions.staticFile
      }
    ]
  ];

  require('http').createServer(function(request, response) {
    return web.routeRequest(request, routes).or(web.error404).run(_.inert, (function(err) {
      if (err instanceof Error) {
        web.showMonadErr(err);
        response.write('There was a problem with your request.');
        return response.end();
      }
    }), {
      request: request,
      response: response
    });
  }).listen(1337, '127.0.0.1');

}).call(this);
