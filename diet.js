// Generated by CoffeeScript 1.6.1
(function() {
  var DELETE, GET, M, POST, PUT, R, actions, addMealToPlan, createFood, createIngredient, createMealFood, createPlan, db, dbM, deleteIngredient, fmap, foodUrl, fs, getLatestMeal, jade, mealUrl, nodam, orm, planUrl, qs, queries, removeMealFromPlan, routes, sql, updateFood, updateMealFood, web, _;

  process.on('error', function(err) {
    return console.log(err.stack);
  });

  _ = require('../nodam/lib/curry.js');

  nodam = require('../nodam/lib/nodam.js');

  sql = require('../nodam/lib/sqlite.js');

  R = require('../nodam/lib/restriction.js');

  orm = require('./lib/orm.js');

  db = require('./model.js');

  web = require('./web.js');

  qs = require('querystring');

  jade = require('jade');

  fs = nodam.fs();

  M = nodam.Maybe;

  GET = 'GET';

  POST = 'POST';

  PUT = 'PUT';

  DELETE = 'DELETE';

  dbM = db.dbM;

  queries = db.queries;

  fmap = _.flip(_.map);

  foodUrl = function(food) {
    return '/food/' + web.wordToUri(food.name);
  };

  mealUrl = function(meal) {
    return '/meal/' + meal.id;
  };

  planUrl = function(plan) {
    return '/plan/' + web.wordToUri(plan.name);
  };

  web.helper.foodUrl = foodUrl;

  web.helper.mealUrl = mealUrl;

  web.helper.planUrl = planUrl;

  createFood = function(post) {
    return db.runQuery(queries.foods_insert, {
      name: post.food_name,
      type: post.food_type,
      cals: post.food_cals || '',
      grams: post.food_grams || ''
    });
  };

  updateFood = function(post) {
    return db.runQuery(queries.foods_update, {
      name: post.food_name,
      type: post.food_type,
      cals: post.food_cals || '',
      grams: post.food_grams || '',
      id: post.update
    });
  };

  deleteIngredient = function(post, food) {
    return db.dbRun('DELETE FROM ingredients ' + orm.condition({
      food_id: food.id,
      ingredient_id: post['delete']
    }));
  };

  createIngredient = function(post, food) {
    return db.foodByName(post.ing_name).pipe(function(ingred) {
      if (!(ingred && ingred.id)) {
        return nodam.result();
      }
      return db.runQuery(queries.ingredients_insert, {
        food_id: food.id,
        ingred_id: ingred.id,
        grams: post.grams || 0
      });
    });
  };

  createMealFood = function(post, meal) {
    return db.foodByName(post.food_name).pipe(function(food) {
      if (!food) {
        return nodam.result();
      } else {
        return db.getMealFood(meal.id, food.id).pipe(function(m_meal_f) {
          var post_grams;
          post_grams = parseInt(post.grams, 10);
          if (m_meal_f.isJust()) {
            return db.runQuery(queries.meal_foods_update, {
              meal_id: meal.id,
              food_id: food.id,
              grams: m_meal_f.fromJust().grams + post_grams
            });
          } else {
            return db.runQuery(queries.meal_foods_insert, {
              meal_id: meal.id,
              food_id: food.id,
              grams: post_grams
            });
          }
        });
      }
    });
  };

  updateMealFood = function(post, meal) {
    return db.runQuery(queries.meal_foods_update, {
      meal_id: meal.id,
      food_id: post.update,
      grams: post.grams
    });
  };

  createPlan = function(post) {
    if (post.name) {
      return M.right(db.runQuery(queries.plans_insert, {
        name: post.name
      }).then(db.dbGet(queries.plans + orm.condition({
        id: orm.literal('last_insert_rowid()')
      }))));
    } else {
      return M.left('Invalid form submission.');
    }
  };

  addMealToPlan = function(post, plan) {
    if (!post.meal_name) {
      return nodam.result(M.left('Invalid form submission.'));
    }
    return db.mealByName(post.meal_name).pipe(function(meal) {
      if (!meal) {
        return nodam.result(M.left('No meal exists by that name'));
      }
      return db.runQuery(queries.plan_meals_insert, {
        plan_id: plan.id,
        meal_id: meal.id
      }).then(nodam.result(M.right()));
    });
  };

  removeMealFromPlan = function(post, plan) {
    if (!post.removeMeal) {
      return nodam.result(M.left('Invalid form submission.'));
    }
    return db.dbRun('DELETE FROM plan_meals' + orm.condition({
      id: post.removeMeal
    })).then(nodam.result(M.right()));
  };

  getLatestMeal = db.dbGet(queries.meals + orm.condition({
    id: orm.literal('last_insert_rowid()')
  }));

  actions = {
    root: function(match) {
      return db.allFoods.pipe(function(rows) {
        return web.showView('foods', {
          foods: rows
        });
      });
    },
    food: function(match) {
      var changes;
      changes = web.getPost.pipe(function(post) {
        if (post['delete']) {
          return db.deleteFood(post['delete']);
        } else if (post.create) {
          return createFood(post);
        } else if (post.update) {
          return updateFood(post);
        } else {
          return nodam.result();
        }
      });
      return changes.then(web.redirect('/'));
    },
    ingredients: function(match) {
      var food_name;
      food_name = match[1] && web.uriToWord(match[1]);
      if (!food_name) {
        return web.error404;
      }
      return db.foodByName(food_name).pipe(function(food) {
        if (!food) {
          return web.error404;
        } else if (food.type === 'dish') {
          return db.ingredientsForFood(food).pipe(function(food2) {
            return web.showView('ingredients', {
              ingredients: food2.ingredients,
              food: food2,
              food_url: foodUrl(food2)
            });
          });
        } else {
          return nodam.result(food.name + ' has no ingredients.');
        }
      });
    },
    manageIngredients: function(match) {
      var food_name;
      food_name = match[1] && web.uriToWord(match[1]);
      if (!food_name) {
        return web.error404;
      }
      return web.getPost.pipe(function(post) {
        return db.foodByName(food_name).pipe(function(food) {
          var m;
          if (!food) {
            return web.error403('No such food: ' + food_name);
          }
          if ('dish' !== food.type) {
            return web.error403(food_name + ' cannot have ingredients.');
          }
          m = post['delete'] ? deleteIngredient(post, food) : post.create ? createIngredient(post, food) : post.update ? db.runQuery(queries.ingredients_update, post) : false;
          if (m) {
            return m.then(db.updateFoodCals(food)).then(web.redirect(match[0]));
          } else {
            return web.error403('Invalid form submission.');
          }
        });
      });
    },
    meals: function(match) {
      return allMeals.pipe(function(meals) {
        return web.showView('meals', {
          meals: meals
        });
      });
    },
    manageMeals: function(match) {
      return nodam.combine([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        if (post['delete']) {
          return db.dbRun('DELETE FROM meals ' + orm.condition({
            id: post['delete']
          })).then(web.redirect('/meals'));
        } else if (post.create) {
          return db.runQuery(queries.meals_insert, {
            name: post.name
          }).then(getLatestMeal).pipe(function(meal) {
            return web.redirect(mealUrl(meal));
          });
        } else {
          return web.redirect('/meals');
        }
      });
    },
    meal: function(match) {
      if (!match[1]) {
        return web.error404;
      }
      return db.dbGet(queries.meals + orm.condition({
        id: match[1]
      })).pipe(function(meal) {
        if (!meal) {
          return web.error404;
        } else {
          return db.fillMealFoods(meal).pipe(function(mealFilled) {
            return web.showView('meal', {
              meal_foods: mealFilled.foods,
              meal: mealFilled
            });
          });
        }
      });
    },
    mealFoods: function(match) {
      var meal_id;
      meal_id = match[1];
      if (!meal_id) {
        return web.error404;
      }
      return nodam.combine([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        return db.dbGet(queries.meals + orm.condition({
          id: meal_id
        })).pipe(function(meal) {
          var e_m;
          if (!meal) {
            return web.error403('No meal with that id: ' + meal_id);
          }
          e_m = post.meal_name ? M.right(db.dbRun("UPDATE meals SET name='" + post.meal_name + "' WHERE id=" + meal_id)) : post['delete'] ? M.right(db.deleteMealFood(meal_id, post['delete'])) : post.create ? M.right(createMealFood(post, meal)) : post.update ? M.right(updateMealFood(post, meal)) : M.left('Invalid form submission.');
          return e_m.either(function(m) {
            return m.then(web.redirect(match[0]));
          }, function(str) {
            return web.error403(str);
          });
        });
      });
    },
    foodList: function(match) {
      var term;
      term = match[2];
      return (term ? db.dbAll(_.template(db.queries.food_list, {
        term: term
      })).mmap(function(rows) {
        if (rows) {
          return JSON.stringify(_.map(rows, function(row) {
            return row.name;
          }));
        } else {
          return nodam.result('');
        }
      }) : nodam.result('')).pipe(web.success);
    },
    plans: function(match) {
      return db.dbAll(queries.plans).pipe(function(plans) {
        return web.showView('plans', {
          plans: plans
        });
      });
    },
    planMeals: function(match) {
      var plan_name;
      plan_name = match[1] && web.uriToWord(match[1]);
      return db.dbGet(queries.plans + orm.condition({
        name: plan_name
      })).pipe(function(plan) {
        if (!plan) {
          return web.error403('No plan "' + plan_name + '" exists.');
        }
        return getPlanMeals(plan).pipe(function(p_meals) {
          if (p_meals && p_meals.length) {
            return nodam.sequence(_.map(p_meals, function(p_meal) {
              return db.fillMealFoods(p_meal.meal).mmap(function(meal) {
                return _.set(p_meal, 'meal', meal);
              });
            }));
          } else {
            return nodam.result([]);
          }
        }).pipe(function(planMealsFilled) {
          return allMeals.pipe(function(all_meals) {
            return web.showView('plan', {
              plan: db.setPlanCals(_.set(plan, 'p_meals', planMealsFilled)),
              all_meals: all_meals
            });
          });
        });
      });
    },
    createPlan: function(match) {
      return nodam.combine([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var e_m;
        e_m = (post.create && createPlan(post)) || M.left('Invalid form submission.');
        return e_m.either(function(m) {
          return m.pipe(function(plan) {
            return web.redirect(planUrl(plan));
          });
        }, function(err) {
          return web.error403(err);
        });
      });
    },
    managePlan: function(match) {
      return nodam.combine([dbM, web.getPost]).pipeArray(function(db_obj, post) {
        var m, plan_name;
        m = post.create ? createPlan(post) : (plan_name = match[1] && web.uriToWord(match[1]), db.dbGet(queries.plans + orm.condition({
          name: plan_name
        })).pipe(function(plan) {
          if (!plan) {
            return nodam.result(M.left('No plan with that id: ' + plan_id));
          } else if (post['delete']) {
            return deletePlan(plan);
          } else if (post.update) {
            return updatePlan(post, plan);
          } else if (post.addMeal) {
            return addMealToPlan(post, plan);
          } else if (post.removeMeal) {
            return removeMealFromPlan(post, plan);
          } else {
            return nodam.result(M.left('Invalid form submission.'));
          }
        }));
        return m.pipe(function(e_m_err) {
          return e_m_err.either(function(x) {
            return web.redirect(match[0]);
          }, function(err) {
            return web.error403(err);
          });
        });
      });
    }
  };

  routes = [
    [
      '/', {
        GET: actions.root
      }
    ], [
      /^\/food\/([\w\+-]+)/, {
        GET: actions.ingredients,
        POST: actions.manageIngredients
      }
    ], [
      /^\/food(\/?)$/, {
        POST: actions.food
      }
    ], [
      /^\/meals(\/?)$/, {
        GET: actions.meals
      }
    ], [
      /^\/meal\/(\d+)/, {
        GET: actions.meal,
        POST: actions.mealFoods
      }
    ], [
      /^\/meal(\/?)$/, {
        POST: actions.manageMeals
      }
    ], [
      /^\/plans(\/?)$/, {
        GET: actions.plans
      }
    ], [
      /^\/plan(\/?)$/, {
        POST: actions.managePlan
      }
    ], [
      /^\/plan\/([\w\+-]+)/, {
        GET: actions.planMeals,
        POST: actions.managePlan
      }
    ], [
      /^\/foodlist(\/?)\?term=(\w*)/, {
        GET: actions.foodList
      }
    ]
  ];

  nodam.http().createServer(function(request, response) {
    nodam.debug(true);
    return web.routeRequest(request, routes).or(web.error404).run(_.inert, (function(err) {
      web.showMonadErr(err);
      response.write('There was a problem with your request.');
      return response.end();
    }), {
      request: request,
      response: response
    });
  }).listen(1337, '127.0.0.1');

}).call(this);
